/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: You should return the head of the sorted linked list,
                    using constant space complexity.
     */
    public ListNode sortList(ListNode head) {  
        // write your code here
        if(head == null || head.next == null)   return head;
        //找中间节点的这一个模块可以另外写一个函数便于维护
        ListNode mid = findMiddle(head);
        ListNode right = sortList(mid.next);
        mid.next = null;   //此处需要处理，注意处理成null;
        ListNode left = sortList(head);
        return merge(left,right);
    }
    private ListNode findMiddle(ListNode head){
        if(head == null || head.next == null)   return head;
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null){  // 需要注意，此处的顺序不能写成fast.next   // 前 fast在后
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    private ListNode merge(ListNode l, ListNode r){
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while(l != null && r != null){
            if(l.val < r.val){
                tail.next = l;
                l = l.next;
            }else{
                tail.next = r;
                r = r.next;
            }
            tail = tail.next;
        }
        if( l!= null){
            tail.next = l;
        }else{
            tail.next = r;
        }
        return dummy.next;
    }
}
