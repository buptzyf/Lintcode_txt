public class Solution {
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(obstacleGrid == null || m == 0)  return 0;
        int[][] step = new int[m][n];
        step[0][0] = 0;
        //初始化行列
        for(int i = 0; i < m; i ++){
            if(obstacleGrid[i][0] == 1)  break;
            else step[i][0] = 1;
        }
        for(int j = 0; j < n; j ++){
            if(obstacleGrid[0][j] == 1)  break;
            else step[0][j] = 1;
        }
        for(int i =1; i < m; i ++){
            for(int j = 1; j < n; j ++){
                if(obstacleGrid[i][j] == 1)  step[i][j] = 0;
                else step[i][j] = step[i-1][j] + step[i][j-1];
            }
        }
        return step[m-1][n-1];
    }
}
