class Solution {
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    ArrayList<ArrayList<String>> solveNQueens(int n) {
        // write your code here
        ArrayList<ArrayList<String>> results = new ArrayList<ArrayList<String>>();
        if(n < 0) return results;
        solution(results,new ArrayList<Integer>(),n);
        return results;
    }
    // 如果一行是合格的，则将这一行插入arraylist中
    public ArrayList<String> insert (ArrayList<Integer> col){
        int n = col.size();
        ArrayList<String> row = new ArrayList<String>();
        String[] temp = new String[n];
        for(int i = 0; i < n; i++){
            temp[i] = "";
            for(int j = 0; j < n; j++){
                if(col.get(i) == j){
                    // row.add(String.valueOf('Q'));
                    temp[i] += 'Q';
                }else{
                    // row.add(String.valueOf('.'));
                    temp[i] += '.';
                }
            }
            row.add(temp[i]);
        }
        return row;
    }
    //判断
    public boolean invalid(ArrayList<Integer>colums, int col){
        int row = colums.size();
        for(int i = 0; i < row; i++){
            // same column
            if(colums.get(i) == col){
                return false;
            }
            // left-top to right-bottom
            if (i - colums.get(i) == row - col) {
                return false;
            }
            // right-top to left-bottom
            if (i + colums.get(i) == row + col) {
                return false;
            }
        }
        return true;
    } 
    public void solution(ArrayList<ArrayList<String>> results,ArrayList<Integer>colums,int n){
        if(colums.size() == n){
            results.add(insert(colums));
            return;
        }

        for(int j = 0; j < n; j++){
            if(invalid(colums,j)){
                colums.add(j);
                solution(results, colums, n);
                colums.remove(colums.size() - 1);
            }
        }
    }
};
