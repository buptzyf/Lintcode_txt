/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     //构造函数如下
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */
public class Solution {
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */    
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        HashMap<DirectedGraphNode,Integer> map = new HashMap<DirectedGraphNode,Integer>();
        for(DirectedGraphNode node : graph){
            for(DirectedGraphNode neighbor : node.neighbors){
                if(map.containsKey(neighbor)){
                // if(map.get(neighbor) != 0){   // 
                    map.put(neighbor,map.get(neighbor)+1);
                }else
                    map.put(neighbor,1);
            }
        }
        ArrayList<DirectedGraphNode> res = new ArrayList<DirectedGraphNode>();
        // Queue<DirectedGraphNode> q = LinkedList<DirectedGraphNode>();
         Queue<DirectedGraphNode> q = new LinkedList<DirectedGraphNode>();
        for(DirectedGraphNode node: graph){
            // if(map.get(node) == 0){
            if(!map.containsKey(node)){
                q.offer(node);
                res.add(node);
            }
        }
        while(q.size() > 0){  // while(!isEmpty())
            DirectedGraphNode node = q.poll();
            // int len = node.neighbors.size();
            for(DirectedGraphNode n:node.neighbors){
                map.put(n,map.get(n) - 1);
                if(map.get(n) == 0){
                    res.add(n);  
                    q.offer(n);
                }
            }
        }
        return res;
    }
}
