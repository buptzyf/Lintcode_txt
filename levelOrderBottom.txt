/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: buttom-up level order a list of lists of integer
     */
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        // write your code here
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(root == null)  return res;
        
        // ArrayList<Integer> list = new ArrayList<Integer>();
        
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Stack<ArrayList<Integer>> s = new Stack<ArrayList<Integer>>();
        
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            ArrayList<Integer> list = new ArrayList<Integer>();
            for(int i = 0; i< size; i++){
                TreeNode tmp = q.poll();
                list.add(tmp.val);
                if(tmp.left != null)  q.offer(tmp.left);
                if(tmp.right!= null)  q.offer(tmp.right);
            }
            // s.push(new ArrayList<Integer>(list));
            s.push(list);
        }
        while(!s.empty()){
            res.add(s.pop());
        }
        return res;
    }
    // void order(TreeNode root,res,left,right){
        
    // }
}
